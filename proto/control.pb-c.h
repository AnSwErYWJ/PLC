/* Generated by the protocol buffer compiler.  DO NOT EDIT! */

#ifndef PROTOBUF_C_control_2eproto__INCLUDED
#define PROTOBUF_C_control_2eproto__INCLUDED

#include "protobuf-c.h"

PROTOBUF_C_BEGIN_DECLS


typedef struct _ControllerState ControllerState;
typedef struct _ControllerBack ControllerBack;


/* --- enums --- */


/* --- messages --- */

struct  _ControllerState
{
  ProtobufCMessage base;
  int32_t ctrl_id;
  int32_t ctrl_state;
};
#define CONTROLLER_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&controller_state__descriptor) \
    , 0, 0 }


struct  _ControllerBack
{
  ProtobufCMessage base;
  int32_t ctrl_id;
  int32_t ctrl_state;
  int32_t ctrl_success;
};
#define CONTROLLER_BACK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&controller_back__descriptor) \
    , 0, 0, 0 }


/* ControllerState methods */
void   controller_state__init
                     (ControllerState         *message);
size_t controller_state__get_packed_size
                     (const ControllerState   *message);
size_t controller_state__pack
                     (const ControllerState   *message,
                      uint8_t             *out);
size_t controller_state__pack_to_buffer
                     (const ControllerState   *message,
                      ProtobufCBuffer     *buffer);
ControllerState *
       controller_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   controller_state__free_unpacked
                     (ControllerState *message,
                      ProtobufCAllocator *allocator);
/* ControllerBack methods */
void   controller_back__init
                     (ControllerBack         *message);
size_t controller_back__get_packed_size
                     (const ControllerBack   *message);
size_t controller_back__pack
                     (const ControllerBack   *message,
                      uint8_t             *out);
size_t controller_back__pack_to_buffer
                     (const ControllerBack   *message,
                      ProtobufCBuffer     *buffer);
ControllerBack *
       controller_back__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   controller_back__free_unpacked
                     (ControllerBack *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ControllerState_Closure)
                 (const ControllerState *message,
                  void *closure_data);
typedef void (*ControllerBack_Closure)
                 (const ControllerBack *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor controller_state__descriptor;
extern const ProtobufCMessageDescriptor controller_back__descriptor;

PROTOBUF_C_END_DECLS


#endif  /* PROTOBUF_control_2eproto__INCLUDED */
