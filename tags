!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ASSERT	fx-serial.c	54;"	d	file:
BUFSIZE	main.c	14;"	d	file:
BUF_POOL_SIZE	fx-serial.c	49;"	d	file:
CC	Makefile	/^CC=gcc$/;"	m
CLOSE	main.c	377;"	d	file:
Calc_data	main.c	/^void Calc_data(int room[],int len)$/;"	f
Co2_trans	main.c	/^float Co2_trans(int id)$/;"	f
Control_controller	main.c	/^void *Control_controller(void *arg)$/;"	f
Ctrl_TrainRoom1	main.c	/^int Ctrl_TrainRoom1[] = {56,57,58,59,60,61,62,63,80};$/;"	v
Ctrl_TrainRoom2	main.c	/^int Ctrl_TrainRoom2[] = {64,65,66,67,68,69,70,71,81};$/;"	v
Ctrl_TrainRoom3	main.c	/^int Ctrl_TrainRoom3[] = {72,73,74,75,76,77,78,79,82};$/;"	v
DEBUG	fx-serial.c	31;"	d	file:
DEBUG	fx-serial.c	40;"	d	file:
DEBUG_LOCK	fx-serial.c	/^pthread_mutex_t DEBUG_LOCK = PTHREAD_MUTEX_INITIALIZER;$/;"	v
FX_SERIAL_H_	fx-serial.h	2;"	d
Get_data	main.c	/^void Get_data(void)$/;"	f
H_trans	main.c	/^float H_trans(int id)$/;"	f
LOCK	fx-serial.c	56;"	d	file:
LOG	fx-serial.c	50;"	d	file:
LOG2	fx-serial.c	51;"	d	file:
LOG3	fx-serial.c	52;"	d	file:
L_trans	main.c	/^float L_trans(int id)$/;"	f
MAXSLEEP	main.c	15;"	d	file:
MESSAGE_HEADER__INIT	proto/message_header.pb-c.h	37;"	d
MESSAGE_HEADER__TYPE__REQUEST	proto/message_header.pb-c.h	/^  MESSAGE_HEADER__TYPE__REQUEST = 1,$/;"	e	enum:_MessageHeader__TYPE
MESSAGE_HEADER__TYPE__RESPONES	proto/message_header.pb-c.h	/^  MESSAGE_HEADER__TYPE__RESPONES = 2,$/;"	e	enum:_MessageHeader__TYPE
MESSAGE_HEADER__TYPE__TEXT	proto/message_header.pb-c.h	/^  MESSAGE_HEADER__TYPE__TEXT = 3$/;"	e	enum:_MessageHeader__TYPE
MTU	fx-serial.c	23;"	d	file:
MessageHeader	proto/message_header.pb-c.h	/^typedef struct _MessageHeader MessageHeader;$/;"	t	typeref:struct:_MessageHeader
MessageHeader_Closure	proto/message_header.pb-c.h	/^typedef void (*MessageHeader_Closure)$/;"	t
MessageHeader__TYPE	proto/message_header.pb-c.h	/^} MessageHeader__TYPE;$/;"	t	typeref:enum:_MessageHeader__TYPE
OPEN	main.c	376;"	d	file:
PRI_MAX	fx-serial.c	48;"	d	file:
PROTOBUF_C_NO_DEPRECATED	proto/getdata.pb-c.c	5;"	d	file:
PROTOBUF_C_NO_DEPRECATED	proto/message_header.pb-c.c	5;"	d	file:
PROTOBUF_C_getdata_2eproto__INCLUDED	proto/getdata.pb-c.h	4;"	d
PROTOBUF_C_message_5fheader_2eproto__INCLUDED	proto/message_header.pb-c.h	4;"	d
SENSOR_INFO__INIT	proto/getdata.pb-c.h	30;"	d
SENSOR_T__INIT	proto/getdata.pb-c.h	41;"	d
Send_data	main.c	/^void Send_data(int id)$/;"	f
SensorInfo	proto/getdata.pb-c.h	/^typedef struct _SensorInfo SensorInfo;$/;"	t	typeref:struct:_SensorInfo
SensorInfo_Closure	proto/getdata.pb-c.h	/^typedef void (*SensorInfo_Closure)$/;"	t
SensorT	proto/getdata.pb-c.h	/^typedef struct _SensorT SensorT;$/;"	t	typeref:struct:_SensorT
SensorT_Closure	proto/getdata.pb-c.h	/^typedef void (*SensorT_Closure)$/;"	t
Sensor_TrainRoom1	main.c	/^int Sensor_TrainRoom1[] = {1,2,3,4,5,6,7,8,9,10};$/;"	v
Sensor_TrainRoom2	main.c	/^int Sensor_TrainRoom2[] = {11,12,13,14};$/;"	v
Sensor_TrainRoom3	main.c	/^int Sensor_TrainRoom3[] = {15,16,17,18};$/;"	v
Sensor_data	main.c	/^void *Sensor_data(void *arg)$/;"	f
Sensor_light_Room1	main.c	/^int Sensor_light_Room1[] = {19,20,21,22};$/;"	v
Sterilization_Ctrl	main.c	/^int Sterilization_Ctrl[]= {50,51,52,53,54,55};$/;"	v
T1_trans	main.c	/^float T1_trans(int id)$/;"	f
T2_trans	main.c	/^float T2_trans(int id)$/;"	f
UNLOCK	fx-serial.c	57;"	d	file:
Write_into_file	main.c	/^void Write_into_file(float room[],int len)$/;"	f
_COMMON_H_	common.h	2;"	d
_MessageHeader	proto/message_header.pb-c.h	/^struct  _MessageHeader$/;"	s
_MessageHeader__TYPE	proto/message_header.pb-c.h	/^typedef enum _MessageHeader__TYPE {$/;"	g
_SensorInfo	proto/getdata.pb-c.h	/^struct  _SensorInfo$/;"	s
_SensorT	proto/getdata.pb-c.h	/^struct  _SensorT$/;"	s
_cb_async	fx-serial.c	/^static int _cb_async(int fd, char *buf, int sz)$/;"	f	file:
_check_command	fx-serial.c	/^static int _check_command(char *buf, int sz)$/;"	f	file:
_close_device	fx-serial.c	/^static int _close_device(struct fx_serial *s)$/;"	f	file:
_getAddressAscii	fx-serial.c	/^static char _getAddressAscii(int address, char buf[4])$/;"	f	file:
_getAscii	fx-serial.c	/^static char _getAscii(int i) $/;"	f	file:
_open_device	fx-serial.c	/^static int _open_device(struct fx_serial *s, char *device)$/;"	f	file:
_set_device	fx-serial.c	/^static int _set_device(struct fx_serial *s, int baude, char bits, char parity, char stop)$/;"	f	file:
add_a_node	fx-serial.c	/^void add_a_node(ptable* p, node** last, node** m, void* key, int priority)$/;"	f
atoh	fx-serial.c	/^static int  atoh(char x)$/;"	f	file:
avge	main.c	/^float avge = 0; \/\/count light's average$/;"	v
base	proto/getdata.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_SensorInfo
base	proto/getdata.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_SensorT
base	proto/message_header.pb-c.h	/^  ProtobufCMessage base;$/;"	m	struct:_MessageHeader
baude	fx-serial.c	/^		int baude;$/;"	m	struct:fx_serial::__anon1	file:
bits	fx-serial.c	/^		char bits;$/;"	m	struct:fx_serial::__anon1	file:
bool	fx-serial.c	/^} bool;$/;"	t	typeref:enum:bool_	file:
bool_	fx-serial.c	/^typedef enum bool_ {$/;"	g	file:
buf	fx-serial.c	/^	char buf[4096];$/;"	m	struct:serialcommand	file:
buf	main.c	/^char buf[BUFSIZE];$/;"	v
buf4_to_integer	fx-serial.c	/^static void buf4_to_integer(char *buf, int *x)$/;"	f	file:
buf_mh	main.c	/^void *buf_mh;$/;"	v
buf_pool	fx-serial.c	/^	node* buf_pool;$/;"	m	struct:ptable_	file:
buf_si	main.c	/^void *buf_si;$/;"	v
buf_st	main.c	/^void *buf_st;$/;"	v
cb	fx-serial.c	/^	serial_cb cb;$/;"	m	struct:serialcommand	file:
cleanup	fx-serial.c	/^void cleanup(ptable *p)$/;"	f
cleanup_array	main.c	/^void cleanup_array(int len,int id)$/;"	f
client_init	socket_client.c	/^int client_init(int port, char *ip)$/;"	f
clientaddr	common.h	/^struct sockaddr_in clientaddr;$/;"	v	typeref:struct:sockaddr_in
co2	proto/getdata.pb-c.h	/^  float co2;$/;"	m	struct:_SensorInfo
config	fx-serial.c	/^	} config;$/;"	m	struct:fx_serial	typeref:struct:fx_serial::__anon1	file:
connect_retry	main.c	/^int connect_retry(int sockfd, const struct sockaddr *addr,socklen_t alen)$/;"	f
controller_get	fx-serial.c	/^int controller_get(struct fx_serial *s, int id, int *status)$/;"	f
controller_set	fx-serial.c	/^int controller_set(struct fx_serial *s, int id, int status)$/;"	f
create	fx-serial.c	/^void create(ptable* p)$/;"	f
create_pool	fx-serial.c	/^void create_pool(ptable** p, uint32_t num)$/;"	f
cv	fx-serial.c	/^	pthread_cond_t cv;$/;"	m	struct:ptable_	file:
data	fx-serial.h	/^	int data[255];$/;"	m	struct:sensorX
dequeue	fx-serial.c	/^	int dequeue;$/;"	m	struct:queue_stats_	file:
device	fx-serial.c	/^	char device[255];$/;"	m	struct:fx_serial	file:
display	fx-serial.c	/^void display(ptable* p)$/;"	f
display_buf_pool	fx-serial.c	/^void display_buf_pool(ptable* p)$/;"	f
enqueue	fx-serial.c	/^	int enqueue;$/;"	m	struct:queue_stats_	file:
ent_count	fx-serial.c	/^	int ent_count;$/;"	m	struct:ptable_	file:
entry	fx-serial.c	/^	ptable_entry entry[PRI_MAX];$/;"	m	struct:ptable_	file:
false	fx-serial.c	/^	false,$/;"	e	enum:bool_	file:
fd	fx-serial.c	/^	int fd;$/;"	m	struct:fx_serial	file:
fd	fx-serial.c	/^	int fd;$/;"	m	struct:serialcommand	file:
fd	main.c	/^int		fd;$/;"	v
fp	main.c	/^FILE   *fp;$/;"	v
free_bbuf_pool	fx-serial.c	/^	node* free_bbuf_pool;$/;"	m	struct:ptable_	file:
fx_serial	fx-serial.c	/^struct fx_serial {$/;"	s	file:
fx_serial_start	fx-serial.c	/^struct fx_serial* fx_serial_start()$/;"	f
getReadCommandFrame	fx-serial.c	/^static int getReadCommandFrame (char *buf, int *sz, int address, int num)$/;"	f	file:
getWriteCommandFrame	fx-serial.c	/^static int getWriteCommandFrame(char *buf, int *sz, int address, int num, char *data)$/;"	f	file:
get_buf	fx-serial.c	/^void* get_buf(ptable *p)$/;"	f
get_data	fx-serial.c	/^void* get_data(ptable* p, int* pri)$/;"	f
has_light	proto/getdata.pb-c.h	/^  protobuf_c_boolean has_light;$/;"	m	struct:_SensorInfo
has_message_type	proto/message_header.pb-c.h	/^  protobuf_c_boolean has_message_type;$/;"	m	struct:_MessageHeader
has_room_tag	proto/message_header.pb-c.h	/^  protobuf_c_boolean has_room_tag;$/;"	m	struct:_MessageHeader
has_session	proto/message_header.pb-c.h	/^  protobuf_c_boolean has_session;$/;"	m	struct:_MessageHeader
has_version	proto/message_header.pb-c.h	/^  protobuf_c_boolean has_version;$/;"	m	struct:_MessageHeader
humidity	proto/getdata.pb-c.h	/^  float humidity;$/;"	m	struct:_SensorInfo
i_to_hex	fx-serial.c	/^static char i_to_hex(int x)$/;"	f	file:
id	fx-serial.h	/^	int id[255];$/;"	m	struct:sensorX
init_msgheader	main.c	/^void init_msgheader(size_t id)$/;"	f
integer_to_buf4	fx-serial.c	/^static void integer_to_buf4(int x, char *buf)$/;"	f	file:
is_available	fx-serial.c	/^	bool is_available;$/;"	m	struct:ptable_	file:
key	fx-serial.c	/^	void* key;$/;"	m	struct:node_	file:
last	fx-serial.c	/^	node* last[PRI_MAX];$/;"	m	struct:ptable_	file:
light	proto/getdata.pb-c.h	/^  float light;$/;"	m	struct:_SensorInfo
lock	fx-serial.c	/^	pthread_mutex_t lock;$/;"	m	struct:ptable_	file:
main	main.c	/^int main(int argc, const char *argv[])$/;"	f
makeup_data	main.c	/^void makeup_data(int id,int len)$/;"	f
message_header__descriptor	proto/message_header.pb-c.c	/^const ProtobufCMessageDescriptor message_header__descriptor =$/;"	v
message_header__field_descriptors	proto/message_header.pb-c.c	/^static const ProtobufCFieldDescriptor message_header__field_descriptors[5] =$/;"	v	file:
message_header__field_indices_by_name	proto/message_header.pb-c.c	/^static const unsigned message_header__field_indices_by_name[] = {$/;"	v	file:
message_header__free_unpacked	proto/message_header.pb-c.c	/^void   message_header__free_unpacked$/;"	f
message_header__get_packed_size	proto/message_header.pb-c.c	/^size_t message_header__get_packed_size$/;"	f
message_header__init	proto/message_header.pb-c.c	/^void   message_header__init$/;"	f
message_header__number_ranges	proto/message_header.pb-c.c	/^static const ProtobufCIntRange message_header__number_ranges[1 + 1] =$/;"	v	file:
message_header__pack	proto/message_header.pb-c.c	/^size_t message_header__pack$/;"	f
message_header__pack_to_buffer	proto/message_header.pb-c.c	/^size_t message_header__pack_to_buffer$/;"	f
message_header__type__descriptor	proto/message_header.pb-c.c	/^const ProtobufCEnumDescriptor message_header__type__descriptor =$/;"	v
message_header__type__enum_values_by_name	proto/message_header.pb-c.c	/^const ProtobufCEnumValueIndex message_header__type__enum_values_by_name[3] =$/;"	v
message_header__type__enum_values_by_number	proto/message_header.pb-c.c	/^const ProtobufCEnumValue message_header__type__enum_values_by_number[3] =$/;"	v
message_header__type__value_ranges	proto/message_header.pb-c.c	/^static const ProtobufCIntRange message_header__type__value_ranges[] = {$/;"	v	file:
message_header__unpack	proto/message_header.pb-c.c	/^       message_header__unpack$/;"	f
message_id	proto/message_header.pb-c.h	/^  int32_t message_id;$/;"	m	struct:_MessageHeader
message_type	proto/message_header.pb-c.h	/^  MessageHeader__TYPE message_type;$/;"	m	struct:_MessageHeader
mh	main.c	/^MessageHeader mh;$/;"	v
mh_length	main.c	/^size_t mh_length;$/;"	v
n	fx-serial.c	/^	node* n;$/;"	m	struct:ptable_entry_	file:
n	fx-serial.h	/^	int n;$/;"	m	struct:sensorX
n_err	fx-serial.c	/^		int n_err;$/;"	m	struct:fx_serial::__anon2	file:
n_recv	fx-serial.c	/^		int n_recv;$/;"	m	struct:fx_serial::__anon2	file:
n_send	fx-serial.c	/^		int n_send;$/;"	m	struct:fx_serial::__anon2	file:
next	fx-serial.c	/^	struct node_* next;$/;"	m	struct:node_	typeref:struct:node_::node_	file:
no_op	fx-serial.c	/^void no_op(){}$/;"	f
node	fx-serial.c	/^} node;$/;"	t	typeref:struct:node_	file:
node_	fx-serial.c	/^typedef struct node_ {$/;"	s	file:
parity	fx-serial.c	/^		char parity;$/;"	m	struct:fx_serial::__anon1	file:
priority	fx-serial.c	/^	int priority;$/;"	m	struct:node_	file:
priority	fx-serial.c	/^	int priority;$/;"	m	struct:ptable_entry_	file:
priority	fx-serial.c	/^int priority[PRI_MAX];$/;"	v
ptable	fx-serial.c	/^} ptable;$/;"	t	typeref:struct:ptable_	file:
ptable_	fx-serial.c	/^typedef struct ptable_ {$/;"	s	file:
ptable_entry	fx-serial.c	/^} ptable_entry;$/;"	t	typeref:struct:ptable_entry_	file:
ptable_entry_	fx-serial.c	/^typedef struct ptable_entry_ {$/;"	s	file:
put_buf	fx-serial.c	/^void put_buf(ptable* p, void* buf)$/;"	f
put_data	fx-serial.c	/^void put_data(ptable* p, void* key, int priority)$/;"	f
queue_stats	fx-serial.c	/^} queue_stats;$/;"	t	typeref:struct:queue_stats_	file:
queue_stats_	fx-serial.c	/^typedef struct queue_stats_ {$/;"	s	file:
req	fx-serial.c	/^	ptable *req; \/\/ queue$/;"	m	struct:fx_serial	file:
room_info	main.c	/^float room_info[10]; \/\/save the room info$/;"	v
room_tag	proto/message_header.pb-c.h	/^  int32_t room_tag;$/;"	m	struct:_MessageHeader
roomid	proto/getdata.pb-c.h	/^  int32_t roomid;$/;"	m	struct:_SensorInfo
roomid	proto/getdata.pb-c.h	/^  int32_t roomid;$/;"	m	struct:_SensorT
safe_read	fx-serial.c	/^static int safe_read(int fd, void *buffer, int n)$/;"	f	file:
safe_write	fx-serial.c	/^static int safe_write(int fd, void *buffer, int count)$/;"	f	file:
sensorX	fx-serial.h	/^struct sensorX {$/;"	s
sensorX_get	fx-serial.c	/^int sensorX_get(struct fx_serial *s, struct sensorX *sx)$/;"	f
sensorX_init	fx-serial.c	/^int sensorX_init(struct sensorX *sx, int n_id, int *id, int *data)$/;"	f
sensorX_set	fx-serial.c	/^int sensorX_set(struct fx_serial *s, struct sensorX *sx)$/;"	f
sensor_get	fx-serial.c	/^int sensor_get(struct fx_serial *s, int id, int *data)$/;"	f
sensor_info__descriptor	proto/getdata.pb-c.c	/^const ProtobufCMessageDescriptor sensor_info__descriptor =$/;"	v
sensor_info__field_descriptors	proto/getdata.pb-c.c	/^static const ProtobufCFieldDescriptor sensor_info__field_descriptors[5] =$/;"	v	file:
sensor_info__field_indices_by_name	proto/getdata.pb-c.c	/^static const unsigned sensor_info__field_indices_by_name[] = {$/;"	v	file:
sensor_info__free_unpacked	proto/getdata.pb-c.c	/^void   sensor_info__free_unpacked$/;"	f
sensor_info__get_packed_size	proto/getdata.pb-c.c	/^size_t sensor_info__get_packed_size$/;"	f
sensor_info__init	proto/getdata.pb-c.c	/^void   sensor_info__init$/;"	f
sensor_info__number_ranges	proto/getdata.pb-c.c	/^static const ProtobufCIntRange sensor_info__number_ranges[1 + 1] =$/;"	v	file:
sensor_info__pack	proto/getdata.pb-c.c	/^size_t sensor_info__pack$/;"	f
sensor_info__pack_to_buffer	proto/getdata.pb-c.c	/^size_t sensor_info__pack_to_buffer$/;"	f
sensor_info__unpack	proto/getdata.pb-c.c	/^       sensor_info__unpack$/;"	f
sensor_set	fx-serial.c	/^int sensor_set(struct fx_serial *s, int id, int data)$/;"	f
sensor_t__descriptor	proto/getdata.pb-c.c	/^const ProtobufCMessageDescriptor sensor_t__descriptor =$/;"	v
sensor_t__field_descriptors	proto/getdata.pb-c.c	/^static const ProtobufCFieldDescriptor sensor_t__field_descriptors[2] =$/;"	v	file:
sensor_t__field_indices_by_name	proto/getdata.pb-c.c	/^static const unsigned sensor_t__field_indices_by_name[] = {$/;"	v	file:
sensor_t__free_unpacked	proto/getdata.pb-c.c	/^void   sensor_t__free_unpacked$/;"	f
sensor_t__get_packed_size	proto/getdata.pb-c.c	/^size_t sensor_t__get_packed_size$/;"	f
sensor_t__init	proto/getdata.pb-c.c	/^void   sensor_t__init$/;"	f
sensor_t__number_ranges	proto/getdata.pb-c.c	/^static const ProtobufCIntRange sensor_t__number_ranges[1 + 1] =$/;"	v	file:
sensor_t__pack	proto/getdata.pb-c.c	/^size_t sensor_t__pack$/;"	f
sensor_t__pack_to_buffer	proto/getdata.pb-c.c	/^size_t sensor_t__pack_to_buffer$/;"	f
sensor_t__unpack	proto/getdata.pb-c.c	/^       sensor_t__unpack$/;"	f
sensordata_pack	main.c	/^void sensordata_pack(float T, float H, float Co2)$/;"	f
serial_cb	fx-serial.c	/^typedef int (*serial_cb)(int fd, char *msg, int sz);$/;"	t	file:
serial_command	fx-serial.c	/^static int serial_command(struct fx_serial *s, struct serialcommand *sc)$/;"	f	file:
serial_stop	fx-serial.c	/^int serial_stop(struct fx_serial *s)$/;"	f
serialcommand	fx-serial.c	/^struct serialcommand {$/;"	s	file:
session	proto/message_header.pb-c.h	/^  int32_t session;$/;"	m	struct:_MessageHeader
si	main.c	/^SensorInfo   si;$/;"	v
si_length	main.c	/^size_t si_length;$/;"	v
single_sensor	main.c	/^void single_sensor(float temperature,int id)$/;"	f
split_array	main.c	/^void split_array(int len)$/;"	f
ss	main.c	/^struct fx_serial *ss;$/;"	v	typeref:struct:fx_serial
st	main.c	/^SensorT		st;$/;"	v
st_length	main.c	/^size_t st_length;$/;"	v
stats	fx-serial.c	/^	queue_stats *stats;$/;"	m	struct:ptable_	file:
stats	fx-serial.c	/^	} stats;$/;"	m	struct:fx_serial	typeref:struct:fx_serial::__anon2	file:
stop	fx-serial.c	/^		char stop;$/;"	m	struct:fx_serial::__anon1	file:
sz	fx-serial.c	/^	int sz;$/;"	m	struct:serialcommand	file:
temperature	proto/getdata.pb-c.h	/^  float temperature;$/;"	m	struct:_SensorInfo
temperature	proto/getdata.pb-c.h	/^  float temperature;$/;"	m	struct:_SensorT
the_time	main.c	/^time_t the_time;$/;"	v
thread_serialcomm	fx-serial.c	/^void *thread_serialcomm(void *parm)$/;"	f
tid_serial	fx-serial.c	/^	pthread_t tid_serial;$/;"	m	struct:fx_serial	file:
true	fx-serial.c	/^	true$/;"	e	enum:bool_	file:
uint32_t	fx-serial.c	55;"	d	file:
version	proto/message_header.pb-c.h	/^  int32_t version;$/;"	m	struct:_MessageHeader
wait_time	fx-serial.c	/^	int wait_time;$/;"	m	struct:queue_stats_	file:
